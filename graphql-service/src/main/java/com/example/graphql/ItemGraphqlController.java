
package com.example.graphql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.graphql.data.method.annotation.*;
import org.springframework.stereotype.Controller;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * GraphQL Controller for managing Item entities.
 *
 * <p>Exposes queries and mutations for CRUD operations on items, with feature toggles
 * for each operation. Uses reactive programming for non-blocking data access.</p>
 */
@Controller
public class ItemGraphqlController {

    /** Repository for Item persistence (reactive). */
    @Autowired private ItemRepository repo;
    /** Feature toggles for CRUD operations. */
    @Autowired private CrudFeatures features;

    /**
     * Returns all items if read is enabled.
     * @return Flux of Item
     */
    @QueryMapping
    public Flux<Item> items() {
        if (!features.isReadEnabled())
            return Flux.error(new IllegalStateException("Read disabled"));
        return repo.findAll();
    }

    /**
     * Returns a single item by ID if read is enabled.
     * @param id the item ID
     * @return Mono of Item or error if not found
     */
    @QueryMapping
    public Mono<Item> itemById(@Argument String id) {
        if (!features.isReadEnabled())
            return Mono.error(new IllegalStateException("Read disabled"));
        return repo.findById(id);
    }

    /**
     * Creates a new item if create is enabled.
     * @param name item name
     * @param description item description
     * @return Mono of created Item
     */
    @MutationMapping
    public Mono<Item> createItem(@Argument String name, @Argument String description) {
        if (!features.isCreateEnabled())
            return Mono.error(new IllegalStateException("Create disabled"));
        // ID is null for new item, will be generated by DB
        return repo.save(new Item(null, name, description));
    }

    /**
     * Updates an existing item if update is enabled.
     * @param id item ID
     * @param name new name (optional)
     * @param description new description (optional)
     * @return Mono of updated Item
     */
    @MutationMapping
    public Mono<Item> updateItem(@Argument String id, @Argument String name,
                                 @Argument String description) {
        if (!features.isUpdateEnabled())
            return Mono.error(new IllegalStateException("Update disabled"));
        // Find, update fields if provided, then save
        return repo.findById(id)
                .map(it -> new Item(it.id(),
                        name != null ? name : it.name(),
                        description != null ? description : it.description()))
                .flatMap(repo::save);
    }

    /**
     * Deletes an item by ID if delete is enabled.
     * @param id item ID
     * @return Mono of true if deleted
     */
    @MutationMapping
    public Mono<Boolean> deleteItem(@Argument String id) {
        if (!features.isDeleteEnabled())
            return Mono.error(new IllegalStateException("Delete disabled"));
        return repo.deleteById(id).thenReturn(true);
    }
}
